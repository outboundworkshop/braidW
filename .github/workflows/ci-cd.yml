name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: braidw
  DOCKER_IMAGE_TAG: ${{ github.sha }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Run tests
      run: ./gradlew test

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        cat >>~/.ssh/config <<END
        Host ec2
          HostName ${{ env.EC2_HOST }}
          User ${{ env.EC2_USER }}
          IdentityFile ~/.ssh/deploy_key
          StrictHostKeyChecking no
        END

    - name: Update docker-compose.yml
      run: |
        sed -i "s|your-dockerhub-username/braidw:latest|${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}|g" docker-compose.yml

    - name: Deploy to EC2
      run: |
        ssh ec2 "
          echo 'Ensuring Docker is installed and running...'
          if ! command -v docker &> /dev/null; then
            echo 'Docker not found, attempting to install...'
            if sudo yum --help &>/dev/null; then
              sudo yum update -y && sudo yum install -y docker
            elif sudo apt-get --help &>/dev/null; then
              sudo apt-get update -y && sudo apt-get install -y docker.io
            else
              echo 'Cannot determine package manager. Please install Docker manually on EC2.' && exit 1
            fi
            echo 'Docker installation process attempted.'
          else
            echo 'Docker already present.'
          fi

          if ! sudo systemctl is-active --quiet docker; then
            echo 'Docker service is not running. Starting and enabling Docker...'
            sudo systemctl start docker && sudo systemctl enable docker
            sleep 5 # Give Docker a moment to start
            if ! sudo systemctl is-active --quiet docker; then
              echo 'Failed to start Docker service. Please check EC2 instance.' && exit 1
            fi
            echo 'Docker service started and enabled.'
          else
            echo 'Docker service is already running.'
          fi

          echo 'Ensuring docker-compose is installed...'
          if ! command -v /usr/local/bin/docker-compose &> /dev/null; then \
            echo 'docker-compose not found, attempting to install...'; \
            REMOTE_OS=\\$(uname -s | tr '[:upper:]' '[:lower:]'); \
            REMOTE_ARCH=\\$(uname -m); \
            echo \\\"Attempting to download docker-compose for OS: \${REMOTE_OS}, ARCH: \${REMOTE_ARCH}\\\"; \
            sudo mkdir -p /usr/local/bin && \
            echo \\\"Attempting to download docker-compose to /usr/local/bin/docker-compose\\\" && \
            sudo curl -LfS https://github.com/docker/compose/releases/latest/download/docker-compose-\${REMOTE_OS}-\${REMOTE_ARCH} -o /usr/local/bin/docker-compose && \
            echo \\\"curl command completed. Checking file...\\\" && \
            if [ ! -s /usr/local/bin/docker-compose ]; then \
              echo \\\"Error: /usr/local/bin/docker-compose was not created or is empty after download.\\\" && \
              ls -l /usr/local/bin/ && \
              exit 1; \
            fi && \
            echo \\\"File /usr/local/bin/docker-compose downloaded successfully.\\\" && \
            sudo chmod +x /usr/local/bin/docker-compose && \
            echo 'docker-compose installed successfully:' && \
            /usr/local/bin/docker-compose --version; \
          else \
            echo 'docker-compose is already installed at /usr/local/bin/docker-compose:'; \
            /usr/local/bin/docker-compose --version; \
          fi
        "

        scp docker-compose.yml ec2:~/

        ssh ec2 "
          echo 'Executing docker-compose commands...'
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml pull
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml stop app || true
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml rm -f app || true
          sudo /usr/local/bin/docker-compose -f ~/docker-compose.yml up -d app
          echo 'Deployment commands executed.'
        " 
